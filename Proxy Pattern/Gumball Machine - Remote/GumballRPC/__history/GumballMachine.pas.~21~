unit GumballMachine;

interface

uses
  StateIntf, System.SysUtils, GumballMachineIntf, MVCFramework.Logger;

type
  TGumballMachine = class(TInterfacedObject, IGumballMachine)
  private
    FSoldOutState: IState;
    FNoQuarterState: IState;
    FHasQuarterState: IState;
    FSoldState: IState;
    FWinnerState: IState;
    FState: IState;
    FCount: Integer;
    FLocation: string;
  public
    constructor Create(ANumberOfGumballs: Integer; ALocation: string); overload;
    procedure InsertQuarter;
    procedure EjectQuarter;
    procedure TurnCrank;
    procedure SetState(State: IState);
    procedure ReleaseBall;
    function GetCount: Integer;
    function GetLocation: string;
    procedure Refill(Count: Integer);
    function GetState: IState;
    function GetSoldOutState: IState;
    function GetNoQuarterState: IState;
    function GetHasQuarterState: IState;
    function GetWinnerState: IState;
    function GetSoldState: IState;
    function ToString: string; override;
  end;

implementation

{ TGumballMachine }

uses
  HasQuarterState, NoQuarterState, SoldOutState, SoldState, WinnerState;

constructor TGumballMachine.Create(ANumberOfGumballs: Integer;
  ALocation: string);
begin
  FSoldOutState := TSoldOutState.Create(Self);
  FNoQuarterState := TNoQuarterState.Create(Self);
  FHasQuarterState := THasQuarterState.Create(Self);
  FSoldState := TSoldState.Create(Self);
  FWinnerState := TWinnerState.Create(Self);
  FCount := ANumberOfGumballs;
  FLocation := ALocation;
  if ANumberOfGumballs > 0 then
    FState := FNoQuarterState;
end;

procedure TGumballMachine.EjectQuarter;
begin
  FState.EjectQuarter;
end;

function TGumballMachine.GetCount: Integer;
begin
  Result := FCount;
end;

function TGumballMachine.GetHasQuarterState: IState;
begin
  Result := FHasQuarterState;
end;

function TGumballMachine.GetLocation: string;
begin
  Result := FLocation;
end;

function TGumballMachine.GetNoQuarterState: IState;
begin
  Result := FNoQuarterState;
end;

function TGumballMachine.GetSoldOutState: IState;
begin
  Result := FSoldOutState;
end;

function TGumballMachine.GetSoldState: IState;
begin
  Result := FSoldState;
end;

function TGumballMachine.GetState: IState;
begin
  Result := FState;
end;

function TGumballMachine.GetWinnerState: IState;
begin
   Result := FWinnerState;
end;

procedure TGumballMachine.InsertQuarter;
begin
  FState.InsertQuarter;
end;

procedure TGumballMachine.Refill(Count: Integer);
begin
  FCount := Count;
  FState := FNoQuarterState;
end;

procedure TGumballMachine.ReleaseBall;
begin
  WriteLn('A gumball comes rolling out the slot...');
  if FCount <> 0 then
    FCount := FCount - 1;

end;

procedure TGumballMachine.SetState(State: IState);
begin
  FState := State;
end;

function TGumballMachine.ToString: string;
begin
  var StrResult := TStringBuilder.Create;
  StrResult.Append(sLineBreak + 'Mighty Gumball, Inc.');
  StrResult.Append(sLineBreak + 'Delphi-enabled Standing Gumball Model #2004' +
    sLineBreak);
  StrResult.Append('Inventory: ' + FCount.ToString + ' gumball');
  if FCount <> 1 then
    StrResult.Append('s');
  StrResult.Append(sLineBreak + 'Machine is ' + FState.ToString + sLineBreak);
  Result := StrResult.ToString;
end;

procedure TGumballMachine.TurnCrank;
begin
  FState.TurnCrank;
  FState.Dispense;
end;

end.
