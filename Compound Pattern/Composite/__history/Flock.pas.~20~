unit Flock;

interface

uses
  QuackableIntf, System.Generics.Collections, IteratorIntf, System.SysUtils,
  FlockIterator, ObserverIntf, GenericIterator;

type
  TFlock = class(TInterfacedObject, IQuackable)
  private
    FQuackers: TList<IQuackable>;
  public
    constructor Create;
    procedure RegisterObserver(Observer: IObserver);
    procedure NotifyObservers;
    procedure Add(Quacker: IQuackable);
    procedure Quack;
    function ToString: string;
  end;

implementation

{ TFlock }

procedure TFlock.Add(Quacker: IQuackable);
begin
    FQuackers.Add(Quacker);
end;

constructor TFlock.Create;
begin
  FQuackers := TList<IQuackable>.Create;
end;

procedure TFlock.NotifyObservers;
begin

end;

procedure TFlock.Quack;
begin
  var Iterator := TGenericIterator<IQuackable>.Create(FQuackers);
  while Iterator.HasNext do
  begin
    var Quacker := Iterator.Next;
    Quacker.Quack;
  end;
end;

procedure TFlock.RegisterObserver(Observer: IObserver);
begin
  var Iterator := TGenericIterator<IObserver>.Create(FQuackers);
  while Iterator.HasNext do
  begin
    var Observer := Iterator.Next;
    Observer.Update(FDuck);
  end;
end;

function TFlock.ToString: string;
begin
  Result := 'Flock of Ducks';
end;

end.
