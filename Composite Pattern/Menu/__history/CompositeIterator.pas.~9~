unit CompositeIterator;

interface

uses
  System.SysUtils, System.Generics.Collections, MenuComponent, IteratorIntf;

type
  TCompositeIterator = class(TInterfacedObject, IIterator)
  private
    FStack: TStack<IIterator>;
  public
    constructor Create(AIterator: IIterator);
    function HasNext: Boolean;
    function Next: TObject;
    procedure Remove;
  end;

implementation

{ TCompositeIterator }

constructor TCompositeIterator.Create(AIterator: IIterator);
begin
  FStack := TStack<IIterator>.Create;
  FStack.Push(AIterator);
end;

function TCompositeIterator.HasNext: Boolean;
begin

end;

function TCompositeIterator.Next: TObject;
begin

end;

procedure TCompositeIterator.Remove;
begin

end;

end.
