unit Amplifier;

interface

type
  TTuner = class;
  TDVDPlayer = class;
  TCDPlayer = class;

  TAmplifier = class
  private
    FDescription: String;
    FTuner: TTuner;
    FDVD: TDVDPlayer;
    FCDPlayer: TCDPlayer;
  public
    constructor Create(ADescription: String);
    procedure OnAmplifier;
    procedure OffProcedure;
    procedure SetStereoSound;
    procedure SetSurrondSound;
    procedure SetVolume(Level: Integer);
    procedure SetTuner(Tuner: TTuner);
    procedure SetDVD(DVD: TDVDPlayer);
    procedure SetCD(CD: TCDPlayer);
    function ToString: String; override;
  end;

  TTuner = class
  private
    FDescription: String;
    FAmplifier: TAmplifier;
    FFrequency: Double;
  public
    constructor create(ADescription: String; AAmplifier: TAmplifier);
    procedure OnTuner;
    procedure OffTuner;
    procedure SetFrequency(Frequency: Double);
    procedure SetAm;
    procedure SetFm;
    function ToString: String; override;
  end;

  TCDPlayer = class
  private
    FDescription: String;
    FCurrentTrack: Integer;
    FAmplifier: TAmplifier;
    FTitle: String;
  public
    constructor Create;
    procedure OnCDPlayer;
    procedure OffCDPlayer;
    procedure Eject;
    procedure Play(Title: String); overload;
    procedure Play(Track: Integer); overload;
    procedure Stop;
    procedure Pause;
    function ToString: String;
  end;

implementation

{ TAmplifier }

constructor TAmplifier.Create(ADescription: String);
begin
  FDescription := ADescription;
end;

procedure TAmplifier.OffProcedure;
begin
  WriteLn(FDescription + ' off');
end;

procedure TAmplifier.OnAmplifier;
begin
  WriteLn(FDescription + ' on');
end;

procedure TAmplifier.SetCD(CD: TCDPlayer);
begin
  WriteLn(FDescription + ' setting CD player to ' + CD.ToString);
end;

procedure TAmplifier.SetDVD(DVD: TDVDPlayer);
begin
  WriteLn(FDescription + ' setting DVD player to ' + DVD.ToString);
end;

procedure TAmplifier.SetStereoSound;
begin
  WriteLn(FDescription + ' stereo mode on');
end;

procedure TAmplifier.SetSurrondSound;
begin
  WriteLn(FDescription + ' surround sound on (5 speakers, 1 subwoofer');
end;

procedure TAmplifier.SetTuner(Tuner: TTuner);
begin
  WriteLn(FDescription + ' setting tuner to ' + Tuner);
end;

procedure TAmplifier.SetVolume(Level: Integer);
begin
  WriteLn(FDescription + ' setting volume to ' + Level);
end;

function TAmplifier.ToString: String;
begin
  Result := FDescription;
end;

{ TTuner }

constructor TTuner.create(ADescription: String; AAmplifier: TAmplifier);
begin
  FDescription := ADescription;
  FAmplifier := AAmplifier;
end;

procedure TTuner.OffTuner;
begin
  WriteLn(FDescription + ' off');
end;

procedure TTuner.OnTuner;
begin
  WriteLn(FDescription + ' on');
end;

procedure TTuner.SetAm;
begin
  WriteLn(FDescription + ' setting AM mode');
end;

procedure TTuner.SetFm;
begin
  WriteLn(FDescription + ' setting FM mode');
end;

procedure TTuner.SetFrequency(Frequency: Double);
begin
  WriteLn(FDescription + ' setting frequency to ' + Frequency);
  FFrequency := Frequency;
end;

function TTuner.ToString: String;
begin
  Result := FDescription;
end;

{ TCDPlayer }

constructor TCDPlayer.Create;
begin
  FDescription := ADescription;
  FAmplifier := AAmplifier;
end;

procedure TCDPlayer.Eject;
begin
  FTitle := nil;
  WriteLn(FDescription + ' eject');
end;

procedure TCDPlayer.OffCDPlayer;
begin
  WriteLn(FDescription + ' off');
end;

procedure TCDPlayer.OnCDPlayer;
begin
  WriteLn(FDescription + ' on');
end;

procedure TCDPlayer.Pause;
begin
  WriteLn(FDescription + ' paused "' + Title + '"');
end;

procedure TCDPlayer.Play(Title: String);
begin
  FTitle := Title;
  FCurrentTrack := 0;
  WriteLn(FDescription + ' playing "' + Title + '"');
end;

procedure TCDPlayer.Play(Track: Integer);
begin
  if FTitle = nil then
  WriteLn(FDescription + ' can''t play ' + Track + ', no cd inserted');
  else
  begin
    FCurrentTrack := Track;
    WriteLn(FDescription + ' playing track ' + FCurrentTrack);
  end;
end;

procedure TCDPlayer.Stop;
begin
  FCurrentTrack := 0;
  WriteLn(FDescription + ' stopped');
end;

function TCDPlayer.ToString: String;
begin
  Result := FDescription;
end;

end.
