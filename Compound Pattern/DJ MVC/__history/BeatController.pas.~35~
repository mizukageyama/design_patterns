unit BeatController;

interface

uses
  ControllerIntf, BeatModelIntf, Forms, ControllerFrm, VCL.Dialogs;

type
  TBeatController = class(TInterfacedObject, IController)
  private
    FModel: IBeatModel;
    FControllerView: TControllerForm;
  public
    constructor Create(Owner: TControllerForm; AModel: IBeatModel);
    procedure Start;
    procedure Stop;
    procedure IncreaseBPM;
    procedure DecreaseBPM;
    procedure SetBPM(BPM: Integer);
  end;

implementation

{ TBeatController }

constructor TBeatController.Create(Owner: TControllerForm; AModel: IBeatModel);
begin
  FModel := AModel;
  FControllerView := Owner;
  FControllerView.DisableStop;
  FControllerView.EnableStart;
  FControllerView.DisableSet;
end;

procedure TBeatController.DecreaseBPM;
begin
  var BPM := FModel.getBPM;
  FModel.SetBPM(BPM - 1);
end;

procedure TBeatController.IncreaseBPM;
begin
  var BPM := FModel.getBPM;
  FModel.SetBPM(BPM + 1);
end;

procedure TBeatController.SetBPM(BPM: Integer);
begin
  if BPM = 0 then
    Stop;
  ShowMessage('here');
  FModel.SetBPM(BPM);
end;

procedure TBeatController.Start;
begin
  FModel.TurnOn;
  FControllerView.DisableStart;
  FControllerView.EnableStop;
  FControllerView.EnableSet;
end;

procedure TBeatController.Stop;
begin
  FControllerView.EnableStart;
  FControllerView.DisableStop;
  FControllerView.DisableSet;
end;

end.
