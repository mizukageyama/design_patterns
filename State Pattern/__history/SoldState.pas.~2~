unit SoldState;

interface

uses
  StateIntf, GumballMachineWithState;

type
  TSoldState = class(TInterfacedObject, IState)
  private
    FGumballMachine: TGumballMachineWithState;
  public
    constructor Create(AGumballMachine: TGumballMachineWithState);
    procedure InsertQuarter;
    procedure EjectQuarter;
    procedure TurnCrank;
    procedure Dispense;
    function ToString: String; override;
  end;

implementation

{ TSoldState }

constructor TSoldState.Create(AGumballMachine: TGumballMachineWithState);
begin
  FGumballMachine := AGumballMachine;
end;

procedure TSoldState.Dispense;
begin
  WriteLn('No gumball dispensed');
end;

procedure TSoldState.EjectQuarter;
begin
  WriteLn('Sorry, you already turned the crank');
end;

procedure TSoldState.InsertQuarter;
begin
  WriteLn('Please wait, we''re already giving you a gumball');
end;

function TSoldState.ToString: String;
begin
		Result := 'waiting for turn of crank';
end;

procedure TSoldState.TurnCrank;
begin
  WriteLn('You turned...');
  FGumballMachine.SetState(FGumballMachine.GetSoldState);
end;

end.

