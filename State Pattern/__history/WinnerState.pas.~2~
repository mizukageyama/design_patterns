unit WinnerState;

interface

uses
  StateIntf, GumballMachineWithState;

type
  TSoldState = class(TInterfacedObject, IState)
  private
    FGumballMachine: TGumballMachineWithState;
  public
    constructor Create(AGumballMachine: TGumballMachineWithState);
    procedure InsertQuarter;
    procedure EjectQuarter;
    procedure TurnCrank;
    procedure Dispense;
    function ToString: String; override;
  end;

implementation

{ TSoldState }

constructor TSoldState.Create(AGumballMachine: TGumballMachineWithState);
begin
  FGumballMachine := AGumballMachine;
end;

procedure TSoldState.Dispense;
begin
  WriteLn('YOU''RE A WINNER! You get two gumballs for your quarter');
  FGumballMachine.ReleaseBall;
  if FGumballMachine.GetCount = 0 then
    FGumballMachine.SetState(FGumballMachine.GetSoldOutState)
  else
  begin
    FGumballMachine.ReleaseBall;
    if FGumballMachine.GetCount > 0 then
    FGumballMachine.SetState(FGumballMachine.GetNoQuarterState)
    else
    begin
      WriteLn('Oops, out of gumballs!');
      FGumballMachine.SetState(FGumballMachine.GetSoldOutState);
    end;
  end;
end;

procedure TSoldState.EjectQuarter;
begin
  WriteLn('Please wait, we''re already giving you a Gumball');
end;

procedure TSoldState.InsertQuarter;
begin
  WriteLn('Please wait, we''re already giving you a Gumball');
end;

function TSoldState.ToString: String;
begin
		Result := 'despensing two gumballs for your quarter, because YOU''RE A WINNER!';
end;

procedure TSoldState.TurnCrank;
begin
  WriteLn('Turning again doesn''t get you another gumball!');
end;

end.

