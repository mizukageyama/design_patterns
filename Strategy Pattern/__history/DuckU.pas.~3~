unit DuckU;

interface

uses
  System.Classes, System.SysUtils, System.Generics.Collections;


type
  IQuackBehavior = interface
    procedure Quack;
  end;

  TQuack = class(TInterfacedObject, IQuackBehavior)
    procedure Quack;
  end;

  TMuteQuack = class(TInterfacedObject, IQuackBehavior)
    procedure Quack;
  end;

  TSqueak = class(TInterfacedObject, IQuackBehavior)
    procedure Quack;
  end;

  IFlyBehavior = interface
    procedure Fly;
  end;

  TFlyWithWings = class(TInterfacedObject, IFlyBehavior)
    procedure Fly;
  end;

  TFlyNoWay = class(TInterfacedObject, IFlyBehavior)
    procedure Fly;
  end;

  TFlyRocketPowered = class(TInterfacedObject, TFlyBehavior)
    procedure Fly;
  end;


  TDuck = class abstract
  public
    FFlyBehavior: TFlyBehavior;
    FQuackBehavior: TQuackBehavior;
    procedure SetFlyBehavior(FB: TFlyBehavior);
    procedure SetQuackBehavior(QB: TQuackBehavior);
    procedure PerformFly;
    procedure PerformQuack;
    procedure Swim;
    procedure Display; virtual; abstract;
  end;

  TMallardDuck = class(TDuck)
  public
    constructor Create;
    procedure Display; override;
  end;

  TModelDuck = class(TDuck)
  public
    constructor Create;
    procedure Display; override;
  end;

implementation

{ TDuck }

procedure TDuck.PerformFly;
begin
  FFlyBehavior.Fly;
end;

procedure TDuck.PerformQuack;
begin
  FQuackBehavior.Quack;
end;

procedure TDuck.SetFlyBehavior(FB: TFlyBehavior);
begin
  FFlyBehavior := FB;
end;

procedure TDuck.SetQuackBehavior(QB: TQuackBehavior);
begin
  FQuackBehavior := QB;
end;

procedure TDuck.Swim;
begin
  WriteLn('All ducks float, even decoys!');
end;

{ TFlyWithWings }

procedure TFlyWithWings.Fly;
begin
  WriteLn('I’m flying!!');
end;

{ TFlyNoWay }

procedure TFlyNoWay.Fly;
begin
  WriteLn('I can’t fly');
end;

{ TMallardDuck }

constructor TMallardDuck.Create;
begin
  FQuackBehavior := TQuack.Create;
  FFlyBehavior := TFlyWithWings.Create;
end;

procedure TMallardDuck.Display;
begin
  WriteLn('I’m a real Mallard duck');
end;

{ TMuteQuack }

procedure TMuteQuack.Quack;
begin
  WriteLn('<< Silence >>');
end;

{ TSqueak }

procedure TSqueak.Quack;
begin
  WriteLn('Squeak');
end;

{ TQuack }

procedure TQuack.Quack;
begin
  WriteLn('Quack');
end;

{ TModelDuck }

constructor TModelDuck.Create;
begin
  FQuackBehavior := TQuack.Create;
  FFlyBehavior := TFlyNoWay.Create;
end;

procedure TModelDuck.Display;
begin
  WriteLn('I’m a model duck');
end;

{ TFlyRocketPowered }

procedure TFlyRocketPowered.Fly;
begin
  WriteLn('I’m flying with a rocket!');
end;

end.
