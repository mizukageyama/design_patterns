unit QuackCounter;

interface

uses QuackableIntf, ObserverIntf, System.SysUtils;

type
  TQuackCounter = class(TInterfacedObject, IQuackable)
  private
    FDuck: IQuackable;
    class var FNumberOfQuacks: Integer;
  public
    constructor Create(ADuck: IQuackable);
    procedure Quack;
    procedure RegisterObserver(Observer: IObserver);
    procedure NotifyObservers;
    class function GetQuacks: Integer;
    function ToString: String;
  end;

implementation

{ TQuackCounter }

constructor TQuackCounter.Create(ADuck: IQuackable);
var
  SelfAsIntf: IQuackObservable;
begin
  FDuck := ADuck;
  if Supports(Self, IQuackable, SelfAsIntf) then
  begin
    FObservable := TObservable.Create(SelfAsIntf);
  end;
end;

class function TQuackCounter.GetQuacks: Integer;
begin
  Result := FNumberOfQuacks;
end;

procedure TQuackCounter.NotifyObservers;
begin
  FDuck.NotifyObservers;
end;

procedure TQuackCounter.Quack;
begin
  FDuck.Quack;
  FNumberOfQuacks := FNumberOfQuacks + 1;
end;

procedure TQuackCounter.RegisterObserver(Observer: IObserver);
begin
  FDuck.RegisterObserver(Observer);
end;

function TQuackCounter.ToString: String;
begin
  Result := FDuck.ToString;
end;

end.
