unit HasQuarterState;

interface

uses
  StateIntf, GumballMachineWithState;

type
  THasQuarterState = class(TInterfacedObject, IState)
  private
    FGumballMachine: TGumballMachineWithState;

  public
    constructor Create(AGumballMachine: TGumballMachineWithState);
    procedure InsertQuarter;
    procedure EjectQuarter;
    procedure TurnCrank;
    procedure Dispense;
    function ToString: String; override;
  end;

implementation

{ THasQuarterState }

constructor THasQuarterState.Create(AGumballMachine: TGumballMachineWithState);
begin
  FGumballMachine := AGumballMachine;
end;

procedure THasQuarterState.Dispense;
begin
  WriteLn('No gumball dispensed');
end;

procedure THasQuarterState.EjectQuarter;
begin
  WriteLn('Quarter returned');
  FGumballMachine.SetState(FGumballMachine.GetNoQuarterState);
end;

procedure THasQuarterState.InsertQuarter;
begin
  WriteLn('You can''t insert another quarter');
end;

function THasQuarterState.ToString: String;
begin
		Result := 'waiting for turn of crank';
end;

procedure THasQuarterState.TurnCrank;
begin
  Randomize;
  WriteLn('You turned...');
  var Winner := Random(10);
  if (Winner = 0) and (FGumballMachine.GetCount > 1) then
    FGumballMachine.SetState(FGumballMachine.GetWinnerState)
  else
    FGumballMachine.SetState(FGumballMachine.GetSoldState);
end;

end.
